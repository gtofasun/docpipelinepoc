<?xml version="1.0" encoding="utf-8"?>
<html lang="en-us" data_mc_search_type="Stem" data_mc_help_system_file_name="index.xml" data_mc_path_to_help_system="../../../" data_mc_target_type="WebHelp2" data_mc_runtime_file_type="Topic" data_mc_preload_images="false" data_mc_in_preview_mode="false" data_mc_medium="non-print" data_mc_toc_path="BookTemplate|Creating Content" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta charset="utf-8" /><title></title>
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/Breadcrumbs.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Gemalto_Template.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/jquery.min.js">/*<![CDATA[*/

 
/*]]>*/</script> <script src="../../../Resources/Scripts/plugins.min.js">/*<![CDATA[*/

 
/*]]>*/</script> <script src="../../../Resources/Scripts/MadCapAll.js">/*<![CDATA[*/

 
/*]]>*/</script></head>
    <body>
        <h2>Examples and Command and Code Snippets</h2>
        <p>When documenting a command line interface (CLI) or application programming interface (API) it is often necessary to include command output examples or code snippets. These examples or snippets are usually written in a monospace font and formatted using manual methods such as tabs and spaces.</p>
        <h4>General highlighting</h4>
        <p>You can use div.highlight to highlight any information you like, as shown below:</p>
        <div class="highlight">
            <h3 class="ntoc">Example of text highlighted with div.highlight</h3>
            <p class="note" MadCap:autonum="&lt;span style=&quot;color: #b90b67;&quot; class=&quot;mcFormatColor&quot;&gt; &lt;b&gt;NOTE&lt;/b&gt; &#160;&#160;&lt;/span&gt;">The top margin is removed for the first child of the div (heading or paragraph style, etc) so that the margin is consistent regardless of the style applied to the first paragraph or heading. The heading above is an h3.<![CDATA[  ]]></p>
            <p>HSMs provide an ultra-secure vault for your digital keys. Integrate your applications to authenticate to an HSM, and protect: </p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">PKI key generation &amp; storage (online and offline CA keys)</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">SSL/TLS</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Code Signing</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Certificate Signing &amp; Validation</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Document signing</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">HSMaaS – Private &amp; Public Cloud Environment</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Transaction processing</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Database encryption</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Smart card issuance</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Hardware root of trust for the Internet of Things (IoT)</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Blockchain</p>
            <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Compliance including GDPR, PCI-DSS, HIPAA, eIDAS, and more</p>
        </div>
        <h4>Preformatted text</h4>
        <p>When including these examples and snippets in the documentation, it is important to retain the original formatting and monospace font, and to be able to import these examples and snippets without the need for reformatting. This requirement is satisfied by the HTML &lt;pre&gt; tag, which is also available as a paragraph format in Flare. Additional &lt;pre.&gt; tags are provided that add indents for examples inserted in lists. See <MadCap:xref href="#Preforma">Using Preformatted Text</MadCap:xref> for details.</p>
        <div class="highlight">
            <h4>Syntax highlighting</h4>
            <p>Although preformatted text allows for improved readability of code samples, most developers use tools that use both indentation and syntax highlighting to enhance code readability. Syntax highlighting tools automatically add color to specific code elements, allowing the elements to be easily distinguished from each other. Syntax highlighters are smart, and are able to detect the code language, and highlight accordingly. Some examples of code authoring tools that provide syntax highlighting are Notepad++ and Eclipse. This template integrates the Prism syntax highlighter (http://prismjs.com/), which allows you to apply a code-specific character tag to your preformatted text that triggers the Prism JavaScript to use syntax highlighting for the specified code type. See <MadCap:xref href="#Using">Using Syntax Highlighting for Code Samples</MadCap:xref>.</p>
            <h3><a name="Preforma"></a>Using Preformatted Text</h3>
            <p>You can use the &lt;pre&gt; tag to add preformatted text. When you use the &lt;pre&gt; tag, the text is inserted as is, with all formatting retained. This is ideal for capturing screen output.</p>
        </div>
        <h4>Examples within body text</h4>
        <p>The following example uses the &lt;pre&gt; style:</p><pre xml:space="preserve">lunacm:&gt; partition contents</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">The User is currently logged in. Looking for objects in the</pre><pre xml:space="preserve">User's partition.</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">Number objects:  2</pre><pre xml:space="preserve">Handle: 7       Label:  Known</pre><pre xml:space="preserve">Handle: 8       Label:  Generated DES3 Key</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">Command Result : No Error</pre>
        <h4>Examples within lists</h4>
        <p>The following examples show how to use the &lt;pre.listLevel1&gt; and &lt;pre.listLevel2&gt; styles:</p>
        <p class="ul1" data_mc_autonum="&amp;lt;b&amp;gt;•&amp;lt;/b&amp;gt;" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">This is a level 1 unordered list item &lt;p.ul1&gt;.</p><pre class="listLevel1" xml:space="preserve">This is an example inserted within a level1 list item &lt;pre.listLevel1&gt;</pre><pre xml:space="preserve" class="listLevel1">The User is currently logged in.  Looking for objects in the User's partition.</pre>
        <p class="ul1" data_mc_autonum="&amp;lt;b&amp;gt;•&amp;lt;/b&amp;gt;" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">Another level 1 unordered list item &lt;p.ul1&gt;.</p>
        <p class="ul2" data_mc_autonum="&amp;lt;b&amp;gt;–&amp;lt;/b&amp;gt;" MadCap:autonum="&lt;b&gt;•&lt;/b&gt;">This is a level 2 unordered list item &lt;p.ul2&gt;.</p><pre class="listLevel2" xml:space="preserve">This is an example inserted within a level1 list item &lt;pre.listLevel2&gt;</pre><pre xml:space="preserve" class="listLevel2">The User is currently logged in.  Looking for objects in the User's partition.</pre>
        <h3><a name="Using"></a>Using Syntax Highlighting for Code Samples</h3>
        <p>This template optionally integrates the Prism syntax highlighter (<a href="http://prismjs.com/">http://prismjs.com</a>), which allows you to apply a code-specific character tag to your preformatted text that triggers the Prism JavaScript to use syntax highlighting for the specified code type. Prism integration is disabled by default, and must be enabled if you want to use it, as described in <MadCap:xref href="#prism_enable">Enabling Prism integration</MadCap:xref></p>
        <p>If your documentation uses code samples, you can apply syntax highlighting to the code samples to make them easier to read, using the same syntax highlighting that developers are familiar with when working with code in tools such as Eclipse or Notepad++.</p>
        <p class="note" MadCap:autonum="&lt;span style=&quot;color: #b90b67;&quot; class=&quot;mcFormatColor&quot;&gt; &lt;b&gt;NOTE&lt;/b&gt; &#160;&#160;&lt;/span&gt;">Syntax highlighting only works in  HTML outputs,  since it uses JavaScript to interpret and highlight the text. Syntax highlighting does not work in PDF outputs. You will not see the syntax highlighting when working in Flare.</p>
        <p class="caution" MadCap:autonum="&lt;span style=&quot;color: #b90b67;&quot; class=&quot;mcFormatColor&quot;&gt; &lt;b&gt;CAUTION!&lt;/b&gt; &#160;&#160;&lt;/span&gt;">Because this output relies on Javascript, ensure that the Javascript is not stripped out when transferring a complied project. For example, when transferring a project through email within Gemalto, you must encrypt the email before sending.</p>
        <h4><a name="prism_enable"></a>Enabling Prism integration</h4>
        <p>Syntax highlighting is implemented by integrating the Prism syntax highlighter as follows:</p>
        <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">The <b>prism.js</b> and <b>prism.css</b> files were generated at <b>http://prismjs.com/</b> and saved to the &lt;project&gt;<b>\Content\Resources\PlugIns\SyntaxHilite\Prism</b> directory.</p>
        <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">The following lines were added to body section of the HTML master pages (&lt;project&gt;<b>\Content\Resources\MasterPages\Default.flmsp</b>, <b>FRAMELESS.flmsp</b>, <b>FRAMELESS_TOOLBAR.flmsp</b> and <b>FRAMELESS_MENU.flmsp</b>).</p><pre class="listLevel1">&lt;!-- Uncomment the following line to enable syntax highlighting</pre><pre class="listLevel1" xml:space="preserve">&lt;script type="text/javascript" src="../PlugIns/SyntaxHilite/Prism/prism.js"&gt;&lt;/script&gt;</pre><pre xml:space="preserve" class="listLevel1">--&gt;</pre>
        <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">The following lines were added to the top of the CSS file (<b>Gemalto_Template.css</b>):</p><pre class="listLevel1">/* If you want to use syntax highlighting, uncomment the following line: */</pre><pre class="listLevel1" xml:space="preserve">/* @import url('../PlugIns/SyntaxHilite/Prism/prism.css'); */</pre>
        <h5>To enable Prism integration</h5>
        <p class="ol1Start" MadCap:autonum="1.">Open the master page that you will use for your HTML outputs and uncomment the  line that enables the <b>prism.js</b> script:</p><pre class="listLevel1" xml:space="preserve">&lt;!-- Uncomment the following line to enable syntax highlighting --&gt;</pre><pre class="listLevel1" xml:space="preserve">&lt;!-- &lt;script type="text/javascript" src="../PlugIns/SyntaxHilite/Prism/prism.js"&gt;&lt;/script&gt; --&gt;</pre>
        <p xml:space="preserve" class="listLevel1">So that it looks like this:</p><pre class="listLevel1" xml:space="preserve">&lt;!-- Uncomment the following line to enable syntax highlighting --&gt;</pre><pre class="listLevel1" xml:space="preserve">&lt;script type="text/javascript" src="../PlugIns/SyntaxHilite/Prism/prism.js"&gt;&lt;/script&gt;</pre>
        <p class="tip" MadCap:autonum="&lt;span style=&quot;color: #b90b67;&quot; class=&quot;mcFormatColor&quot;&gt; &lt;b&gt;TIP&lt;/b&gt; &#160;&#160;&lt;/span&gt;">If you open the file in Flare's internal text editor (right-click on the file and select <b>Open With</b> &gt; <b>Internal Text Editor</b>), comments are displayed in green.</p>
        <p class="ol1" MadCap:autonum="2.">Open the CSS file (<b>Resources/Stylesheets/Gemalto_Template.css</b>) and uncomment the line that enables the prism.css file:</p><pre class="listLevel1">/* If you want to use syntax highlighting, uncomment the following line: */</pre><pre class="listLevel1" xml:space="preserve">/* @import url('../PlugIns/SyntaxHilite/Prism/prism.css'); */</pre>
        <p class="listLevel1">So that it looks like this:</p><pre class="listLevel1">/* If you want to use syntax highlighting, uncomment the following line: */</pre><pre class="listLevel1" xml:space="preserve">@import url('../PlugIns/SyntaxHilite/Prism/prism.css');</pre>
        <h4>Applying syntax highlighting to your code samples</h4>
        <p>To apply syntax highlghting to your code samples, format the samples using the &lt;pre&gt; tag, and then apply the desired <b>code.language-</b>&lt;language&gt; character style.</p>
        <h5>To apply syntax highlighting to your code samples</h5>
        <p class="ol1Start" MadCap:autonum="1.">Insert the code snippet into the document.</p>
        <p class="ol1" MadCap:autonum="2.">Ensure that the snippet is a single paragraph. That is, all formatting must use spaces/tabs and soft returns (Shift-Enter). You can edit the source using the Text Editor mode to remove the &lt;p&gt; and &lt;/p&gt; tags if they were added when you pasted the snippet.</p>
        <p class="ol1" MadCap:autonum="3.">Apply the <b>pre</b> style to the code snippet paragraph. </p>
        <p class="ol1" MadCap:autonum="4.">Highlight the contents of the paragraph (do not include the paragraph markers). The <b>Style</b> field will display <b>(text)</b> to indicate that you are in character style mode.</p>
        <p class="listLevel1">
            <img src="../../Resources/Images/template_ug/character_mode.png" />
        </p>
        <p class="ol1" MadCap:autonum="5.">Use the Style menu drop-down to select and apply the desired <b>code.language-</b>&lt;language&gt; character style to the highlighted text.</p>
        <p class="listLevel1">
            <img src="../../Resources/Images/template_ug/character_style.png" />
        </p>
        <h4>Examples</h4>
        <p>The following code samples illustrate syntax highlighting for the various supported <b>code.language-</b>&lt;language&gt; styles.</p>
        <h5>C-like</h5>
        <p>The following code snippet uses the <b>code.language-clike</b> style.</p><pre xml:space="preserve"><code class="language-clike">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;errno.h&gt;
        &#160;
char* program_name;
        &#160;
void system_error(char* cause, int exit_code)
{
fprintf(stderr,"%s: %s: %s\n",program_name,cause, (char*) strerror(errno));
exit(exit_code);
}
        &#160;&#160;
int main(int argc, char **argv)
{
if(argc != 2)
{
printf("Usage: %s &lt;filename&gt;\n",argv[0]);
exit(EXIT_FAILURE);
}
program_name = argv[0];
/* Permisions for the new file */
mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH;
        &#160;
/* filename for the new file */
char* filename = argv[1];
        &#160;
/* Create a new file */
int fd = open(filename,O_CREAT | O_EXCL,mode);
if(fd == -1)
{
system_error("open",EXIT_FAILURE);
}
        &#160;
exit(EXIT_SUCCESS);
}</code></pre>
        <h5>CSS</h5>
        <p>The following code snippet uses the <b>code.language-css</b> style.</p><pre xml:space="preserve"><code class="language-css">/*&lt;meta /&gt;*/
@import url('./SyntaxHighlighting/Prism/prism.css');

body
{
   font-family: Arial;
   margin-bottom: 0px;  
   margin-left: 0pt;
   margin-right: 0px;
   margin-top: 0px;
}

h1
{
   page-break-before: always;
   font-family: Arial;
   margin-top: 0;
   margin-left: 0pt;
   margin-bottom: 60pt;
   text-align: left;
   mc-hyphenate: never;
   font-style: normal;
   color: #e06c08;
   font-size: 18pt;
   font-weight: 500;
}</code></pre>
        <h5>Docker</h5>
        <p>The following code snippet uses the <b>code.language-docker</b> style.</p><pre xml:space="preserve"><code class="language-docker"># Build
        IMAGEID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1) &amp;&amp; sudo docker build -t $IMAGEID .

# Run new container
        CONTAINER_ID=$(sudo docker run -t -d -p 0.0.0.0:81:80 $IMAGEID)

# Login into running containe. REQUIRES DOCKER &gt;= 1.3
        sudo docker exec -it $CONTAINER_ID bash

# Container stdout
        sudo docker logs $CONTAINER_ID

# Inspect container config
        sudo docker inspect $CONTAINER_ID


# Stop container
        sudo docker stop $CONTAINER_ID</code></pre>
        <h5>Git</h5>
        <p>The following code snippet uses the <b>code.language-git</b> style.</p><pre xml:space="preserve"><code class="language-git">$ git push origin amend-my-name

Counting objects: 34, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (21/21), done.
Writing objects: 100% (28/28), 6.87 KiB, done.
Total 28 (delta 13), reused 12 (delta 7)
To git@github.com:evildmp/afraid-to-commit.git
* [new branch]      amend-my-name -&gt; amend-my-name</code></pre>
        <h5>Java</h5>
        <p>The following code snippet uses the <b>code.language-java</b> style.</p><pre xml:space="preserve"><code class="language-java">Jaxenter out = null;
try {
    out = new Jaxenter (new FileWriter(”filename”, true));
    out.write(”aString”);
} catch (IOException e) {
    // error processing code
} finally {
    if (out != null) {
        out.close();
    }
}</code></pre>
        <h5>Javascript</h5>
        <p>The following code snippet uses the <b>code.language-javascript</b> style.</p><pre xml:space="preserve"><code class="language-javascript">var Prism = require('prismjs');</code></pre><pre xml:space="preserve"><code class="language-javascript">// The code snippet you want to highlight, as a string
var code = "var data = 1;";
// Returns a highlighted HTML string
var html = Prism.highlight(code, Prism.languages.javascript);
{
        "hsms": "/api/lunasa/hsms",
        "syslog": "/api/lunasa/syslog",
        "ssh": "/api/lunasa/ssh",
        "network": "/api/lunasa/network",
        "services": "/api/lunasa/services",
        "actions": "/api/lunasa/actions",
        "ntp": "/api/lunasa/ntp",
        "forceSoLogin": false,
        "version": "6.2.0-6",
        "time": "/api/lunasa/time",
        "snmp": "/api/lunasa/snmp",
        "webServer": "/api/lunasa/webServer",
        "ntls": "/api/lunasa/ntls",
        "ssh": "/api/lunasa/ssh",
        "sensors": "/api/lunasa/sensors"
}</code></pre>
        <h5>JSON</h5>
        <p>The following code snippet uses the <b>code.language-json</b> style.</p><pre><code class="language-json">{"widget": {
		"debug": "on",
		"window": {
		"title": "Sample Konfabulator Widget",
		"name": "main_window",
		"width": 500,
		"height": 500
		},
		"image": { 
		"src": "Images/Sun.png",
		"name": "sun1",
		"hOffset": 250,
		"vOffset": 250,
		"alignment": "center"
		},
		"text": {
		"data": "Click Here",
		"size": 36,
		"style": "bold",
		"name": "text1",
		"hOffset": 250,
		"vOffset": 100,
		"alignment": "center",
		"onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
		}
		}}</code></pre>
        <h5>Markup</h5>
        <p>The following code snippet uses the <b>code.language-markup</b> style.</p><pre><code class="language-markup">It's very easy to make some words **bold** and other words *italic* with Markdown.
You can even [link to Google!](http://google.com)</code></pre>
        <h5>Perl</h5>
        <p>The following code snippet uses the <b>code.language-perl</b> style.</p><pre xml:space="preserve"><code class="language-perl">my $filename = 'check.txt';
if(open F,"&gt;$filename")
{
   close F;
   unlink "$filename"';
   print 'Permissions are OK.';
}
   else
{ print 'Permission denied for writing files!' }</code></pre>
        <h5>Python</h5>
        <p>The following code snippet uses the <b>code.language-python</b> style.</p><pre xml:space="preserve"><code class="language-python"># This program adds two numbers

num1 = 1.5
num2 = 6.3

# Add two numbers
sum = float(num1) + float(num2)

# Display the sum
print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))</code></pre>
        <h5>SQL</h5>
        <p>The following code snippet uses the <b>code.language-sql</b> style.</p><pre><code class="language-sql">mysql&gt; CREATE PROCEDURE myProc()
    -&gt; BEGIN
    -&gt;      DECLARE i INT DEFAULT 1;
    -&gt;
    -&gt;      SET autocommit=0;
    -&gt;
    -&gt;      DROP TABLE IF EXISTS test_table ;
    -&gt;      CREATE TABLE test_table (
    -&gt;           id        INT PRIMARY KEY,
    -&gt;            some_data VARCHAR(30))
    -&gt;      ENGINE=innodb;
    -&gt;
    -&gt; END$$
Query OK, 0 rows affected (0.00 sec)</code></pre>
    </body>
</html>