<?xml version="1.0" encoding="utf-8"?>
<html lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="BookTemplate|Generating outputs" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../Resources/TableStyles/List1.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title></title>
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/Breadcrumbs.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Gemalto_Template.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h2>Building and Publishing Output Targets</h2>
        <p>After you have created targets for all of your outputs, you can use the targets to build and publish your outputs:</p>
        <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">When you <b>build</b> an output, the output is saved to the <b>Output</b>/&lt;user&gt; folder located in the same directory as your project file. If you are simply emailing files around for reviews and configuration management, this is adequate, and you do not need to publish your outputs.</p>
        <p class="ul1" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">When you <b>publish</b> an output, the output is copied from the <b>Output</b> folder to the location specified by the Destination associated with the target.</p>
        <h3>Outputs that combine HTML and PDF</h3>
        <p>If your project combines HTML and PDF targets into a single package that provides links from the Home page or TOC to PDF versions of the documentation, the PDF files  must exist, and be updated in, the <b>Content</b> folder, so that you can link them. See <MadCap:xref href="SingleSource_HTML_PDF.htm">Setting Up Your Project for Combined HTML and PDF Outputs</MadCap:xref> for more information.</p>
        <p> By convention, the PDF files are placed in the <b>Content/PDF</b> folder. You can publish your PDFs directly to the <b>Contents/PDF</b> folder, but you must ensure that you publish your PDFs before you publish the HTML&#160;to ensure that the HTML&#160;output includes up-to-date PDFs.</p>
        <h3>Manual Building and Publishing</h3>
        <p>You can manually build or publish an output by right-clicking on the output target  and selecting either <b>Build</b> or <b>Publish</b>. Batch targets allow you to build and publish in a single step. Note that you must build an output target before you can publish it. Manual building and publishing is useful for small projects, or if you just want to check your work. For large projects, it is recommended that you automate your building and publishing tasks to save time and ensure consistency and thoroughness.</p>
        <h3><a name="Automate"></a>Automated Building and Publishing</h3>
        <p>There are two ways you can automate the building and publishing of your output targets:</p>
        <p class="ul1" data-mc-autonum="&lt;b&gt;•&lt;/b&gt;" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">using Scheduled Tasks in Windows.</p>
        <p class="ul1" data-mc-autonum="&lt;b&gt;•&lt;/b&gt;" MadCap:autonum="&lt;b&gt;&amp;gt;&lt;/b&gt;">using  the <b>madbuild</b> command line tool in a Bash script</p>
        <h4>Scheduled Tasks</h4>
        <p>You can set up scheduled tasks in windows to automate your output target building and publishing. Refer to the Flare and Windows documentation for more information.</p>
        <h4>Using the madbuild Command </h4>
        <p>The <b>madbuild</b> command allows you to build a target or batch target from the command line. You can run madbuild from a command prompt window, or you can call it from a Bash script. Bash scripts also allow you to automate other parts of the publishing process, such as integrating non-Flare documentation within your Flare project, or publishing to a web site.</p>
        <h4>Batch (BAT) Scripts</h4>
        <p>Batch files provide the greatest flexibility for  building and publishing your output targets. You can run batch commands on demand, or as a scheduled task. You could further enhance the build process by creating interactive scripts that prompt for information such as where to publish. Another potential enhancement is a log parser that reports build errors found in the logs.</p>
        <h5>Sample BAT script that uses madbuild to build a PDF batch target followed by an HTML&#160;target</h5>
        <p>The following batch file is used to build the Enterprise template outputs in two steps. It builds and publishes the PDFs first, followed by the HTML:</p>
        <p class="figureCaption" data-mc-autonum="Figure 1: " MadCap:autonum="Figure 1: ">Sample BAT script used to build the  Enterprise template project</p><pre>@echo off</pre><pre>REM Set global variables</pre><pre>set FLARE="C:\Program Files\MadCap Software\MadCap Flare 13\Flare.app"</pre><pre>set PROJECT="C:\CustomerDoc\Templates\2017\Enterprise\Gemalto_Flare_Template.flprj"</pre><pre xml:space="preserve">REM Set target variables</pre><pre xml:space="preserve">set TARGET_HTML="XHTML_ALL_DOCS.fltar"</pre><pre xml:space="preserve">set TARGET_PDF_BATCH="PDF\BATCH_PDF.flbat"</pre><pre>REM Build the project</pre><pre>cd %FLARE%</pre><pre>REM Build and publish the targets</pre><pre>REM Always build the PDF targets first </pre><pre xml:space="preserve">REM so that the HTML builds include up-to-date PDFs</pre><pre xml:space="preserve">madbuild -project %PROJECT% -batch %TARGET_PDF_BATCH% -log true</pre><pre>madbuild -project %PROJECT% -batch %TARGET_HTML% -log true</pre><pre>REM cmd \k</pre><pre xml:space="preserve">&#160;</pre>
        <p>This script builds and publishes the outputs for a combined HTML/PDF project in two steps, by building and publishing the PDFs first, and the HTML  second. The script works as follows:</p>
        <p class="ol1Start" MadCap:autonum="1.">Set the variables for the script. Using variables is recommended since it allows you to easily update and re-use the script. The variables are defined as follows:</p>
        <table style="width: 97%;mc-table-style: url('../../Resources/TableStyles/List1.css');" class="TableStyle-List1" cellspacing="0">
            <col class="TableStyle-List1-Column-Column1" />
            <col class="TableStyle-List1-Column-Column1" />
            <tbody>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">FLARE</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the full path to the Flare executable.</td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">PROJECT</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the full path to the Flare project you want to build.</td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">TARGET_HTML</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the path, relative to the <b>Project/Targets</b> folder, to the HTML target you want to build. </td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyB-Column1-Body1" style="font-weight: bold;">TARGET_PDF_BATCH</td>
                    <td class="TableStyle-List1-BodyA-Column1-Body1">Specifies the path, relative to the <b>Project/Targets</b> folder, to the PDF batch target you want to build. </td>
                </tr>
            </tbody>
        </table>
        <p class="ol1" MadCap:autonum="2.">Build the projects using <b>madbuild</b>. To run <b>madbuild</b>, you must first <b>cd</b> to the folder containing the <b>madbuild</b> executable (<b>cd %FLARE%</b>).</p>
        <p class="listLevel1">The <b>madbuild</b> executable takes as arguments the project and target you want to build. </p>
        <p class="ul2" MadCap:autonum="&lt;b&gt;•&lt;/b&gt;">If you are building a single target, the syntax is <b>madbuild -project</b> &lt;project&gt; <b>-target</b> &lt;target&gt; [<b>-log true</b>]</p>
        <p class="ul2" MadCap:autonum="&lt;b&gt;•&lt;/b&gt;">If you are building a batch target, the syntax is <b>madbuild -project</b> &lt;project&gt; <b>-batch</b> &lt;batch_target&gt; [<b>-log true</b>]</p>
        <h5>Sample BAT script that uses madbuild to build a PDF/HTML batch target and then copy the PDFs to the published HTML output</h5>
        <p>The following batch file is used to build the Enterprise template outputs using a single batch target. The PDFs are published to a location outside of the project and then copied to the published HTML output after the build is complete:</p>
        <p class="figureCaption" data-mc-autonum="Figure 1: " MadCap:autonum="Figure 2: ">Sample BAT script used to build the  Enterprise template project</p><pre>@echo off</pre><pre>REM Set global variables</pre><pre>set FLARE="C:\Program Files\MadCap Software\MadCap Flare 13\Flare.app"</pre><pre xml:space="preserve">set PROJECT="C:\CustomerDoc\Templates\2017\Enterprise\flare\Gemalto_Flare_Template.flprj"</pre><pre xml:space="preserve">REM Set target variables</pre><pre xml:space="preserve">set TARGET_HTML_PDF_BATCH="HTML_PDF_BATCH.flbat"</pre><pre>REM Set PDF variables</pre><pre xml:space="preserve">set PDF_SRC="C:\CustomerDoc\Templates\2017\Enterprise\flare\pdf"</pre><pre>set PDF_DEST="C:\inetpub\wwwroot\Templates\2017\Enterprise\Content\PDF"</pre><pre>REM Build the project</pre><pre>cd %FLARE%</pre><pre>REM Build and publish the targets</pre><pre>REM Always build the PDF targets first </pre><pre xml:space="preserve">REM so that the HTML builds include up-to-date PDFs</pre><pre xml:space="preserve">madbuild -project %PROJECT% -batch %TARGET_HTML_PDF_BATCH% -log true</pre><pre>REM Copy the built PDF to the output destination</pre><pre>xcopy /s /y %PDF_SRC% %PDF_DEST%</pre><pre>REM cmd \k</pre><pre xml:space="preserve">&#160;</pre>
        <p>The script works as follows:</p>
        <p class="ol1Start" MadCap:autonum="1.">Set the variables for the script. Using variables is recommended since it allows you to easily update and re-use the script. The variables are defined as follows:</p>
        <table style="width: 97%;mc-table-style: url('../../Resources/TableStyles/List1.css');" class="TableStyle-List1" cellspacing="0">
            <col class="TableStyle-List1-Column-Column1" />
            <col class="TableStyle-List1-Column-Column1" />
            <tbody>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">FLARE</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the full path to the Flare executable.</td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">PROJECT</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the full path to the Flare project you want to build.</td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">TARGET_HTML_PDF_BATCH</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the path, relative to the <b>Project/Targets</b> folder, to the PDF batch target you want to build. </td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyE-Column1-Body1" style="font-weight: bold;">PDF_SRC</td>
                    <td class="TableStyle-List1-BodyD-Column1-Body1">Specifies the location where the PDFs were published using the build script.</td>
                </tr>
                <tr class="TableStyle-List1-Body-Body1">
                    <td class="TableStyle-List1-BodyB-Column1-Body1" style="font-weight: bold;">PDF_DEST</td>
                    <td class="TableStyle-List1-BodyA-Column1-Body1">Specifies the location ion the built HTML output to copy the updated PDFs to.</td>
                </tr>
            </tbody>
        </table>
        <p class="ol1" MadCap:autonum="2.">Build the projects using <b>madbuild</b>. To run <b>madbuild</b>, you must first <b>cd</b> to the folder containing the <b>madbuild</b> executable (<b>cd %FLARE%</b>).</p>
        <p class="listLevel1">The <b>madbuild</b> executable takes as arguments the project and target you want to build. </p>
        <p class="ul2" MadCap:autonum="&lt;b&gt;•&lt;/b&gt;">If you are building a single target, the syntax is <b>madbuild -project</b> &lt;project&gt; <b>-target</b> &lt;target&gt; [<b>-log true</b>]</p>
        <p class="ul2" MadCap:autonum="&lt;b&gt;•&lt;/b&gt;">If you are building a batch target, the syntax is <b>madbuild -project</b> &lt;project&gt; <b>-batch</b> &lt;batch_target&gt; [<b>-log true</b>]</p>
        <p class="ol1" MadCap:autonum="3.">Copy the PDFs from the PDF_SRC folder to the PDF_DEST folder.</p>
        <h3>Publishing to a Web Server</h3>
        <p>Publishing your documentation to an internal web server is strongly recommended. By publishing to a web server, your documentation is easily accessible to your internal development, verification, and support teams, amongst others. To maximize the benefits of publishing to a web server, it is recommended that you publish your documentation on a regular basis, preferably using an automated nightly build, with an on-demand option.</p>
        <p>To publish to a web server, the best approach is to use a single server (for example, Windows Server 2008 or Windows Server 2012) configured as both a file server and web server. This server is used to host the documentation source (file server) and generated targets (web server). Using this method, you can run the build scripts as Administrator to locally access the source and locally publish the outputs to the web server (which requires Administrator access privileges), avoiding any network and permissions issues.</p>
        <p>The example build script shown in <MadCap:xref href="#Automate">Automated Building and Publishing</MadCap:xref> illustrates this concept. In this setup, the source resides on the server in the <b>C:\CustomerDoc</b> folder. The web server content resides under <b>C:\inetpub/wwwroot</b> in product-specific folders, which in turn contain release-specific folders, as illustrated below:</p>
        <p class="figureCaption" MadCap:autonum="Figure 3: ">Web server folder structure</p><pre xml:space="preserve">C:\inetpub/wwwroot</pre><pre xml:space="preserve">  Product A</pre><pre xml:space="preserve">  Product B</pre><pre xml:space="preserve">    1.0</pre><pre xml:space="preserve">    2.0</pre>
    </body>
</html>